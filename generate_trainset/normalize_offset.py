def normalize_offsets(offsets: list) -> list:
    """
    Normalize the provided list of offsets by merging or removing some of them
    :param offsets: original offsets as list of tuples generated by pattern matching
    :return: cleaned list of tuples
    """
    sorted_offsets = sorted(offsets, key=lambda tup: tup[0])
    offset_to_keep = list()
    previous_start_offset, previous_end_offset, previous_type_tag = None, None, None

    for current_start_offset, current_end_offset, current_type_tag in sorted_offsets:

        # merge tags which appear as separated but are not really
        if (previous_end_offset is not None) and (previous_end_offset + 2 >= current_start_offset):
            previous_start_offset, previous_end_offset, previous_type_tag = previous_start_offset, \
                                                                            current_end_offset, \
                                                                            tag_priority(current_type_tag,
                                                                                         previous_type_tag)

        if (previous_end_offset is not None) and (previous_end_offset < current_end_offset):
            offset_to_keep.append((previous_start_offset, previous_end_offset, previous_type_tag))

        # keep longest tags when they are one on the other
        if (previous_end_offset is not None) and (previous_end_offset >= current_end_offset):
            current_start_offset, current_end_offset, current_type_tag = previous_start_offset, \
                                                                         previous_end_offset, \
                                                                         tag_priority(current_type_tag,
                                                                                      previous_type_tag)

        if current_end_offset - current_start_offset <= 3:
            current_start_offset, current_end_offset, current_type_tag = previous_start_offset, \
                                                                         previous_end_offset, \
                                                                         previous_type_tag

        previous_start_offset, previous_end_offset, previous_type_tag = (current_start_offset,
                                                                         current_end_offset,
                                                                         current_type_tag)
    if previous_start_offset is not None:
        offset_to_keep.append((previous_start_offset, previous_end_offset, previous_type_tag))
    return offset_to_keep


def tag_priority(tag1: str, tag2: str) -> str:
    """
    Apply some rules to decide which tag to keep when merging 2 offsets
    :param tag1: tag as a string
    :param tag2: tag as a string
    :return: the selected tag
    """
    if tag1 in ["PARTIE_PP", "PARTIE_PM"]:
        return tag2
    else:
        return tag1
